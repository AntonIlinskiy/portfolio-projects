from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import re

router = Router()

# --- –ö–Ω–æ–ø–∫–∏ ---
BTN_BACK = KeyboardButton(text="‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
BTN_CANCEL = KeyboardButton(text="‚úñÔ∏è –û—Ç–º–µ–Ω–∞")
BTN_SHARE_PHONE = KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)

services_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üõ† –†–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä –ø–æ–¥ –∫–ª—é—á")],
        [KeyboardButton(text="üè° –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –¥–æ–º–æ–≤")],
        [KeyboardButton(text="üìê –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–º–æ–≤")],
        [BTN_BACK, BTN_CANCEL],
    ],
    resize_keyboard=True
)

back_cancel_kb = ReplyKeyboardMarkup(
    keyboard=[[BTN_BACK, BTN_CANCEL]],
    resize_keyboard=True
)

phone_kb = ReplyKeyboardMarkup(
    keyboard=[[BTN_SHARE_PHONE], [BTN_BACK, BTN_CANCEL]],
    resize_keyboard=True
)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã ---
class RequestForm(StatesGroup):
    name = State()
    phone = State()
    service = State()
    comment = State()
    confirm = State()

# --- –°—Ç–∞—Ä—Ç —Ñ–æ—Ä–º—ã ---
@router.message(F.text == "üìû –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def request_start(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(RequestForm.name)
    await message.answer(
        "–î–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º –∑–∞—è–≤–∫—É.\n\n–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?",
        reply_markup=back_cancel_kb
    )

# --- –ò–º—è ---
@router.message(RequestForm.name, F.text)
async def req_name(message: Message, state: FSMContext):
    name = message.text.strip()
    if len(name) < 2:
        await message.answer("–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â—ë —Ä–∞–∑.", reply_markup=back_cancel_kb)
        return
    await state.update_data(name=name)
    await state.set_state(RequestForm.phone)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä¬ª.",
        reply_markup=phone_kb
    )

# --- –¢–µ–ª–µ—Ñ–æ–Ω: –∫–æ–Ω—Ç–∞–∫—Ç –∏–∑ Telegram ---
@router.message(RequestForm.phone, F.contact)
async def req_phone_contact(message: Message, state: FSMContext):
    phone = message.contact.phone_number
    await state.update_data(phone=phone)
    await state.set_state(RequestForm.service)
    await message.answer("–ö–∞–∫–æ–π —Ç–∏–ø —É—Å–ª—É–≥–∏ –Ω—É–∂–µ–Ω?", reply_markup=services_kb)

# --- –¢–µ–ª–µ—Ñ–æ–Ω: —Ç–µ–∫—Å—Ç–æ–º ---
PHONE_RE = re.compile(r"^\+?\d{10,15}$")

@router.message(RequestForm.phone, F.text)
async def req_phone_text(message: Message, state: FSMContext):
    phone = message.text.strip().replace(" ", "")
    if not PHONE_RE.match(phone):
        await message.answer("–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç.", reply_markup=phone_kb)
        return
    await state.update_data(phone=phone)
    await state.set_state(RequestForm.service)
    await message.answer("–ö–∞–∫–æ–π —Ç–∏–ø —É—Å–ª—É–≥–∏ –Ω—É–∂–µ–Ω?", reply_markup=services_kb)

# --- –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏ ---
@router.message(RequestForm.service, F.text.in_({
    "üõ† –†–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä –ø–æ–¥ –∫–ª—é—á",
    "üè° –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –¥–æ–º–æ–≤",
    "üìê –ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–º–æ–≤"
}))
async def req_service(message: Message, state: FSMContext):
    await state.update_data(service=message.text)
    await state.set_state(RequestForm.comment)
    await message.answer("–ö–æ—Ä–æ—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ). –ú–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ¬´‚Äî¬ª.", reply_markup=back_cancel_kb)

# --- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π ---
@router.message(RequestForm.comment, F.text)
async def req_comment(message: Message, state: FSMContext):
    await state.update_data(comment=message.text.strip())
    data = await state.get_data()

    summary = (
        "‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–±—Ä–∞–Ω–∞:\n\n"
        f"–ò–º—è: {data.get('name')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
        f"–£—Å–ª—É–≥–∞: {data.get('service')}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment') or '‚Äî'}\n\n"
        "–û—Ç–ø—Ä–∞–≤–ª—è—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –°–ø–∞—Å–∏–±–æ!"
    )
    await message.answer(summary, reply_markup=ReplyKeyboardRemove())

    # TODO: —Å—é–¥–∞ –ø–æ—Å—Ç–∞–≤—å ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ chat_id, –∫—É–¥–∞ —Å–ª–∞—Ç—å –∑–∞—è–≤–∫–∏
    ADMIN_CHAT_ID = None  # –Ω–∞–ø—Ä–∏–º–µ—Ä, 123456789
    if ADMIN_CHAT_ID:
        try:
            await message.bot.send_message(
                ADMIN_CHAT_ID,
                f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n"
                f"–ò–º—è: {data.get('name')}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
                f"–£—Å–ª—É–≥–∞: {data.get('service')}\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment') or '‚Äî'}"
            )
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω—É: {e}")

    await state.clear()
    # –≤–µ—Ä–Ω—ë–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∏–º–ø–æ—Ä—Ç–∏—Ä—É–π –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ main_menu)
    try:
        from bot.keyboards import main_menu
        await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())
    except Exception:
        pass

# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ: –æ—Ç–º–µ–Ω–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç ---
@router.message(F.text == "‚úñÔ∏è –û—Ç–º–µ–Ω–∞")
async def req_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    try:
        from bot.keyboards import main_menu
        await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())
    except Exception:
        pass

@router.message(F.text == "‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def req_back_to_main(message: Message, state: FSMContext):
    await state.clear()
    try:
        from bot.keyboards import main_menu
        await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())
    except Exception:
        await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
