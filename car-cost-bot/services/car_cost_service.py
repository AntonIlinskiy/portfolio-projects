from services.parsers.avito_parser_playwright import AvitoCarParser
from services.cost_calculator import calculate_total_cost
from typing import Optional, Dict

def get_final_car_cost(url: str) -> Optional[Dict[str, int]]:
    print("\n‚ñ∂Ô∏è –í—ã–∑–æ–≤ get_final_car_cost")

    try:
        parser = AvitoCarParser(url)
        car_info = parser.get_info()
        print("\U0001F9FE car_info –ø–æ–ª—É—á–µ–Ω:", car_info)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        return None

    if not car_info or not car_info.get("price"):
        print("‚ùå car_info –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–µ–Ω—É")
        return None

    base_price = car_info.get("price")
    print("\U0001F4B0 –ò–∑–≤–ª–µ—á—ë–Ω base_price:", base_price)

    cost_result = calculate_total_cost(base_price)
    return cost_result


# –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞
if __name__ == "__main__":
    test_url = "https://www.avito.ru/moskva/avtomobili/bmw_3_seriya_2.0_at_2012_250_000_km_7401611722"
    result = get_final_car_cost(test_url)

    print("\nüì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç get_final_car_cost:", result)

    if result:
        for key, value in result.items():
            print(f"{key}: {value} ‚ÇΩ")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
