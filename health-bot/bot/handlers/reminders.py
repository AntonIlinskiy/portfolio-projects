import re
from aiogram import Router
from aiogram.filters import Command, CommandObject
from aiogram.filters import Command, CommandObject
from aiogram.types import Message
from bot.storage.db import SessionLocal
from bot.storage.crud import (
    get_reminders_for_user, set_water_reminder, upsert_workout_reminder
)
from bot.services.scheduler import schedule_user_reminders

router = Router()

def _format_status(rows) -> str:
    water = next((r for r in rows if r.kind == 'water'), None)
    workout = next((r for r in rows if r.kind == 'workout'), None)
    wtxt = "–≤–∫–ª (10.00-20.00 –∫–∞–∂–¥—ã–µ –¥–≤–∞ —á–∞—Å–∞)" if water and water.enabled else "–≤—ã–∫–ª"
    ttxt = f"–≤ {workout.time_str}" if workout and workout.enabled and workout.time_str else "–Ω–µ –∑–∞–¥–∞–Ω–æ"
    return (
        "<b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n"
        f"üíß –í–æ–¥–∞: {wtxt}\n"
        f"üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {ttxt}\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /water_on ‚Äî –≤–∫–ª—é—á–∏—Ç—å –≤–æ–¥—É\n"
        "‚Ä¢ /water_off ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å –≤–æ–¥—É\n"
        "‚Ä¢ /setworkout HH:MM ‚Äî –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /setworkout 19:00)\n"
        "‚Ä¢ /unsetworkout ‚Äî —É–±—Ä–∞—Ç—å –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
    )

@router.message(Command("reminders"))
async def reminders_status(msg: Message):
    db = SessionLocal()
    try:
        rows = get_reminders_for_user(db, msg.from_user.id)
        await msg.answer(_format_status(rows))
    finally:
        db.close()

@router.message(Command("water_on"))
async def water_on(msg: Message):
    db = SessionLocal()
    try:
        set_water_reminder(db, msg.from_user.id, True)
        from bot.storage.crud import get_reminders_for_user
        from bot.services.scheduler import scheduler
        rows = get_reminders_for_user(db, msg.from_user.id)
        schedule_user_reminders(msg.bot, msg.from_user.id, rows)
        await msg.answer("üíß –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–¥–µ –≤–∫–ª—é—á–µ–Ω–æ (–∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ —Å 10:00 –¥–æ 20:00).")
    finally:
        db.close()
                           
    
@router.message(Command("water_off"))
async def water_off(msg: Message):
    db = SessionLocal()
    try:
        set_water_reminder(db, msg.from_user.id, False)
        rows = get_reminders_for_user(db, msg.from_user.id)
        schedule_user_reminders(msg.bot, msg.from_user.id, rows)
        await msg.answer("üíß –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–¥–µ –≤—ã–∫–ª—é—á–µ–Ω–æ.")
    finally:
        db.close()

@router.message(Command("setworkout"))
async def set_workout(msg: Message, command: CommandObject):
    arg = (command.args or "").strip()
    if not re.fullmatch(r"\d{1,2}:\d{2}", arg):
        await msg.answer("–£–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM. –ü—Ä–∏–º–µ—Ä: /setworkout 19:00")
        return
    hh, mm = arg.split(":")
    if not (0 <= int(hh) <= 23 and 0 <= int(mm) <= 59):
        await msg.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä: /setworkout 19:00")
        return
    db = SessionLocal()
    try:
        upsert_workout_reminder(db, msg.from_user.id, f"{int(hh):02d}:{int(mm):02d}")
        rows = get_reminders_for_user(db, msg.from_user.id)
        schedule_user_reminders(msg.bot, msg.from_user.id, rows)
        await msg.answer(f"üèãÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {int(hh):02d}:{int(mm):02d} –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.")
    finally:
        db.close()        

@router.message(Command("unsetworkout"))
async def unset_workout(msg: Message):
    db = SessionLocal()
    try:
        upsert_workout_reminder(db, msg.from_user.id, None)
        rows = get_reminders_for_user(db, msg.from_user.id)
        schedule_user_reminders(msg.bot, msg.from_user.id, rows)
        await msg.answer("üèãÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
    finally:
        db.close()      