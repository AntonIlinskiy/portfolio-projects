from datetime import date, timedelta
from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardRemove,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from services.slots import get_free_slots, reserve_slot



try:
    from bot.keyboards import main_menu
except Exception:
    main_menu = None

router = Router()




class BookingForm(StatesGroup):
    service = State()
    brand   = State()
    model   = State()
    date    = State()
    time    = State()



def generate_dates(days: int = 7) -> list[str]:
    """–°–ø–∏—Å–æ–∫ –¥–∞—Ç –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ N –¥–Ω–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD."""
    today = date.today()
    return [(today + timedelta(days=i)).isoformat() for i in range(days)]


def services_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ó–∞–º–µ–Ω–∞ –º–∞—Å–ª–∞"), KeyboardButton(text="–¢–û")],
            [KeyboardButton(text="–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"), KeyboardButton(text="–®–∏–Ω–æ–º–æ–Ω—Ç–∞–∂")],
            [KeyboardButton(text="‚úñÔ∏è –û—Ç–º–µ–Ω–∞")],
        ],
        resize_keyboard=True
    )


def cancel_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚úñÔ∏è –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )


def dates_inline_kb(dates: list[str]) -> InlineKeyboardMarkup:
    rows = []
    row = []
    for i, d in enumerate(dates, start=1):
        row.append(InlineKeyboardButton(text=d, callback_data=f"date:{d}"))
        if i % 3 == 0:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    return InlineKeyboardMarkup(inline_keyboard=rows)


def times_inline_kb(times: list[str]) -> InlineKeyboardMarkup:
    rows = []
    row = []
    for i, t in enumerate(times, start=1):
        row.append(InlineKeyboardButton(text=t, callback_data=f"time:{t}"))
        if i % 4 == 0:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    return InlineKeyboardMarkup(inline_keyboard=rows)



@router.message(F.text == "üóì –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¢–û")
async def start_booking(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(BookingForm.service)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=services_kb()
    )



@router.message(BookingForm.service, F.text)
async def set_service(message: Message, state: FSMContext):
    text = message.text.strip()
    if text == "‚úñÔ∏è –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        if main_menu:
            await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())
        return

    await state.update_data(service=text)
    await state.set_state(BookingForm.brand)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: BMW):",
        reply_markup=cancel_kb()
    )



@router.message(BookingForm.brand, F.text)
async def set_brand(message: Message, state: FSMContext):
    text = message.text.strip()
    if text == "‚úñÔ∏è –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        if main_menu:
            await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())
        return

    await state.update_data(brand=text)
    await state.set_state(BookingForm.model)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: X5):",
        reply_markup=cancel_kb()
    )



@router.message(BookingForm.model, F.text)
async def set_model(message: Message, state: FSMContext):
    text = message.text.strip()
    if text == "‚úñÔ∏è –û—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        if main_menu:
            await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())
        return

    await state.update_data(model=text)
    await state.set_state(BookingForm.date)

    ds = generate_dates(7)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=ReplyKeyboardRemove()
    )
    await message.answer(
        "–ë–ª–∏–∂–∞–π—à–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–Ω–∏:",
        reply_markup=dates_inline_kb(ds)
    )



@router.callback_query(F.data.startswith("date:"))
async def pick_date_cb(callback: CallbackQuery, state: FSMContext):
    _, picked = callback.data.split(":", 1)
    await state.update_data(date=picked)

    
    slots = get_free_slots(picked) or []
    if not slots:
        await callback.answer("–ù–∞ —ç—Ç—É –¥–∞—Ç—É —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–µ—Ç.", show_alert=True)
       
        ds = generate_dates(7)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É:")
        await callback.message.edit_reply_markup(reply_markup=dates_inline_kb(ds))
        return

    await state.set_state(BookingForm.time)
    await callback.message.edit_text(f"–î–∞—Ç–∞: {picked}\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:")
    await callback.message.edit_reply_markup(reply_markup=times_inline_kb(slots))



@router.callback_query(F.data.startswith("time:"))
async def pick_time_cb(callback: CallbackQuery, state: FSMContext):
    
    try:
        _, time_str = callback.data.split(":", 1)
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è.", show_alert=True)
        return

    data = await state.get_data()
    date_str = data.get("date")
    service  = data.get("service")
    brand    = data.get("brand")
    model    = data.get("model")
    user_id  = callback.from_user.id

    if not date_str:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É.", show_alert=True)
        return
    if not all([service, brand, model]):
        await callback.answer("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö (—É—Å–ª—É–≥–∞/–º–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å). –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        await state.clear()
        return

    ok = reserve_slot(date_str, time_str, user_id, service, brand, model)
    if not ok:
        await callback.answer("–≠—Ç–æ—Ç —Å–ª–æ—Ç —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–Ω—è–ª–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.", show_alert=True)
        # –û–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ —ç—Ç—É –∂–µ –¥–∞—Ç—É
        slots = get_free_slots(date_str) or []
        if not slots:
            await callback.message.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —ç—Ç—É –¥–∞—Ç—É —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç.")
            return
        await callback.message.edit_reply_markup(reply_markup=times_inline_kb(slots))
        return

    await callback.message.edit_text(
        "‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
        f"–£—Å–ª—É–≥–∞: {service}\n"
        f"–ê–≤—Ç–æ: {brand} {model}\n"
        f"–î–∞—Ç–∞: {date_str}\n"
        f"–í—Ä–µ–º—è: {time_str}"
    )
    await state.clear()



@router.message(F.text == "‚úñÔ∏è –û—Ç–º–µ–Ω–∞")
async def cancel_flow(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    if main_menu:
        await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu())
